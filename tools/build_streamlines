#!/usr/bin/python

import sys
import os
import numpy as np
import nibabel as nib
import dipy.reconst.dti as dti
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table
from dipy.reconst.dti import fractional_anisotropy, color_fa, lower_triangular, quantize_evecs
from dipy.data import get_sphere
from dipy.tracking.eudx import EuDX

indir = sys.argv[1]
outfile = sys.argv[2]

# load data
img = nib.load(os.path.join(indir, 'raw.nii.gz'))
data = img.get_data()
bvals, bvecs = read_bvals_bvecs(os.path.join(indir, 'bvals'), os.path.join(indir, 'bvecs'))
# mask data with wm tissue segmentation
mask = nib.load(os.path.join(indir, 'b0_brain_seg_1.nii.gz')).get_data()
d = np.rollaxis(data, 3)
d *= mask
data = np.rollaxis(d, 0, 4)

# fit tensor model
gtab = gradient_table(bvals, bvecs)
tenmodel = dti.TensorModel(gtab)
tenfit = tenmodel.fit(data)
FA = fractional_anisotropy(tenfit.evals)
FA[np.isnan(FA)] = 0

# build streamlines
sphere = get_sphere('symmetric724')
peak_indices = quantize_evecs(tenfit.evecs, sphere.vertices)
eu = EuDX(FA.astype('f8'), peak_indices, seeds=50000, odf_vertices = sphere.vertices, a_low=0.2)
tensor_streamlines = [streamline for streamline in eu]
tensor_streamlines_trk = ((sl, None, None) for sl in tensor_streamlines)

# store streamlines to TRK file
hdr = nib.trackvis.empty_header()
hdr['voxel_size'] = img.get_header().get_zooms()[:3]
hdr['voxel_order'] = 'LAS'
hdr['dim'] = FA.shape
nib.trackvis.write(outfile, tensor_streamlines_trk, hdr, points_space='voxel')
# fixup header for XTK; for some reason can't be done upfront
tvf = nib.trackvis.TrackvisFile.from_file(outfile)
tvf.header['n_count'] = len(tensor_streamlines)
tvf.to_file(outfile)

